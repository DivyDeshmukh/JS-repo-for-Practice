// // // function abc(num) {
// // //     this.num = num;
// // //     return num*5;
// // // }

// // // abc.power = 2;
// // // abc.exp = 4;
// // // console.log(abc(5));
// // // console.log(abc.power);
// // // console.log(abc);
// // // console.log(abc.prototype);                      // {} bcoz nothing is added using .prototype
// // // const arr = new Array(1, 2, 3, 4);
// // // const obj = new Object({
// // //     name: 'Divy',
// // //     age: 21
// // // })

// // // // console.log(obj);
// // // const fun = new Function('a', 'b', 'return a+b');                 // first n arguments are its parameters and last is function body
// // // console.log(fun(4,5));
// // // const a = new abc(5);

// // // abc.prototype.hello = () => {
// // //     console.log(hello);
// // // }
// // // console.log(abc.prototype);                 // only give properties or methods that are defined using .prototype

// // function createUser(username, score) {
// //     this.username = username;
// //     this.score = score;
// // }

// // createUser.prototype.increment = function () {
// //     this.score++; 
// // }

// // createUser.prototype.printMe = function () {
// //     console.log(`score is ${this.score}`);
// // }

// // const chai = new createUser('chai', 25);
// // const tea = createUser('tea', 250);

// // chai.printMe();

// // /*
// // Here's what happens behind the scenes when the new keyword is used:

// // A new object is created: The new keyword initiates the creation of a new JavaScript object.

// // A prototype is linked: The newly created object gets linked to the prototype property of the constructor function. This means that it has access to properties and methods defined on the constructor's prototype.

// // The constructor is called: The constructor function is called with the specified arguments and this is bound to the newly created object. If no explicit return value is specified from the constructor, JavaScript assumes this, the newly created object, to be the intended return value.

// // The new object is returned: After the constructor function has been called, if it doesn't return a non-primitive value (object, array, function, etc.), the newly created object is returned.
// // */

// const User = {
//     name: "chai",
//     email: "chai@google.com"
// }

// const Teacher = {
//     makeVideo: true
// }

// const TeachingSupport = {
//     isAvailable: false
// }

// let TASupport = {
//     makeAssignment: 'JS Assignment',
//     fullTime: true,
//     __proto__: TeachingSupport
// }

// Teacher.__proto__ = User

// // Object.prototype.commonMethod = () => {
// //     console.log('now, every object can use this common method');
// // }

// // Teacher.commonMethod();
// // TeachingSupport.commonMethod();
// // TASupport.commonMethod();

// /*
// // how to make TASupport inherit props from TeachingSupport other than __proto__
// const TeachingSupport = {
//     isAvailable: false
// };

// let TASupport = Object.create(TeachingSupport);
// TASupport.makeAssignment = 'JS Assignment';
// TASupport.fullTime = true;

// console.log(TASupport.isAvailable); // false
// console.log(TASupport.makeAssignment); // 'JS Assignment'
// console.log(TASupport.fullTime); // true
// */

// // modern syntax (__proto__) is old
// Object.setPrototypeOf(TeachingSupport, Teacher);
// /*the use of Object.setPrototypeOf() to dynamically change the prototype of an object. While it is a valid technique, it's less common and can have some performance implications. So, the caution is about preferring more straightforward and conventional approaches (like class or Object.create()) over dynamic manipulation of prototypes unless there's a specific reason to use the latter.*/

// let anotherUserName = "ChaiAurCode             "
// // setting method on String prototype itself so that every instance of String can use it.
// String.prototype.trueLength = function () {
//     console.log(`${this}`);
//     console.log(this.constructor);
//     console.log(`True Length is ${this.trim().length}`);
// }

// anotherUserName.trueLength();
// "Divy           ".trueLength()
// "khushi         ".trueLength()
   
